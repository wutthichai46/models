diff --git a/build_deps/requirements.txt b/build_deps/requirements.txt
index f8ad5c0..c79ef80 100644
--- a/build_deps/requirements.txt
+++ b/build_deps/requirements.txt
@@ -1,2 +1,2 @@
 # TensorFlow greater than this date is manylinux2010 compliant
-tensorflow==2.0.0
+# tensorflow>=2.0.0
diff --git a/configure.sh b/configure.sh
index a23e051..5986671 100755
--- a/configure.sh
+++ b/configure.sh
@@ -48,11 +48,11 @@ elif [[ ! -z "$1" ]]; then
 fi
 
 # Install python dependencies
-read -r -p "Tensorflow 2.0 will be installed if it is not already. Are You Sure? [y/n] " reply
-case $reply in
-    [yY]*) echo "Installing...";;
-    * ) echo "Goodbye!"; exit;;
-esac
+# read -r -p "Tensorflow 2.x will be installed if it is not already. Are You Sure? [y/n] " reply
+# case $reply in
+#     [yY]*) echo "Installing...";;
+#     * ) echo "Goodbye!"; exit;;
+# esac
 
 BUILD_DEPS_DIR=build_deps
 REQUIREMENTS_TXT=$BUILD_DEPS_DIR/requirements.txt
diff --git a/tensorflow_addons/custom_ops/activations/BUILD b/tensorflow_addons/custom_ops/activations/BUILD
index 6550ace..274882f 100644
--- a/tensorflow_addons/custom_ops/activations/BUILD
+++ b/tensorflow_addons/custom_ops/activations/BUILD
@@ -36,7 +36,7 @@ cc_binary(
     ],
     copts = [
         "-pthread",
-        "-std=c++11",
+        "-std=c++17",
         D_GLIBCXX_USE_CXX11_ABI,
     ] + if_cuda(["-DGOOGLE_CUDA=1"]),
     linkshared = 1,
diff --git a/tensorflow_addons/custom_ops/image/BUILD b/tensorflow_addons/custom_ops/image/BUILD
index bfc0054..7aa0f2a 100644
--- a/tensorflow_addons/custom_ops/image/BUILD
+++ b/tensorflow_addons/custom_ops/image/BUILD
@@ -36,7 +36,7 @@ cc_binary(
     ],
     copts = [
         "-pthread",
-        "-std=c++11",
+        "-std=c++17",
         D_GLIBCXX_USE_CXX11_ABI,
     ] + if_cuda(["-DGOOGLE_CUDA=1"]),
     linkshared = 1,
@@ -103,7 +103,7 @@ cc_binary(
     ],
     copts = [
         "-pthread",
-        "-std=c++11",
+        "-std=c++17",
         D_GLIBCXX_USE_CXX11_ABI,
     ] + if_cuda(["-DGOOGLE_CUDA=1"]),
     linkshared = 1,
diff --git a/tensorflow_addons/custom_ops/image/cc/kernels/image_projective_transform_op.cc b/tensorflow_addons/custom_ops/image/cc/kernels/image_projective_transform_op.cc
index fcc784c..0dc63cf 100644
--- a/tensorflow_addons/custom_ops/image/cc/kernels/image_projective_transform_op.cc
+++ b/tensorflow_addons/custom_ops/image/cc/kernels/image_projective_transform_op.cc
@@ -119,7 +119,7 @@ class ImageProjectiveTransformV2 : public OpKernel {
 };
 
 #define REGISTER(TYPE)                                        \
-  REGISTER_KERNEL_BUILDER(Name("ImageProjectiveTransformV2")  \
+  REGISTER_KERNEL_BUILDER(Name("Addons>ImageProjectiveTransformV2")  \
                               .Device(DEVICE_CPU)             \
                               .TypeConstraint<TYPE>("dtype"), \
                           ImageProjectiveTransformV2<CPUDevice, TYPE>)
diff --git a/tensorflow_addons/custom_ops/image/cc/ops/image_ops.cc b/tensorflow_addons/custom_ops/image/cc/ops/image_ops.cc
index 35aa429..b77317c 100644
--- a/tensorflow_addons/custom_ops/image/cc/ops/image_ops.cc
+++ b/tensorflow_addons/custom_ops/image/cc/ops/image_ops.cc
@@ -128,7 +128,7 @@ REGISTER_OP("EuclideanDistanceTransform")
     .Doc(EuclideanDistanceTransformDoc);
 
 // V2 op supports output_shape.
-REGISTER_OP("ImageProjectiveTransformV2")
+REGISTER_OP("Addons>ImageProjectiveTransformV2")
     .Input("images: dtype")
     .Input("transforms: float32")
     .Input("output_shape: int32")
@@ -149,4 +149,4 @@ REGISTER_OP("ImageConnectedComponents")
     })
     .Doc(ImageConnectedComponentsDoc);
 
-}  // namespace tensorflow
\ No newline at end of file
+}  // namespace tensorflow
diff --git a/tensorflow_addons/custom_ops/layers/BUILD b/tensorflow_addons/custom_ops/layers/BUILD
index 9ad39a5..f270228 100644
--- a/tensorflow_addons/custom_ops/layers/BUILD
+++ b/tensorflow_addons/custom_ops/layers/BUILD
@@ -14,7 +14,7 @@ cc_binary(
     ],
     copts = [
         "-pthread",
-        "-std=c++11",
+        "-std=c++17",
         D_GLIBCXX_USE_CXX11_ABI,
     ] + if_cuda(["-DGOOGLE_CUDA=1"]),
     linkshared = 1,
diff --git a/tensorflow_addons/custom_ops/seq2seq/BUILD b/tensorflow_addons/custom_ops/seq2seq/BUILD
index 712c78e..35be2df 100644
--- a/tensorflow_addons/custom_ops/seq2seq/BUILD
+++ b/tensorflow_addons/custom_ops/seq2seq/BUILD
@@ -3,7 +3,6 @@ licenses(["notice"])  # Apache 2.0
 package(default_visibility = ["//visibility:public"])
 
 load("@local_config_tf//:build_defs.bzl", "D_GLIBCXX_USE_CXX11_ABI")
-load("@local_config_cuda//cuda:build_defs.bzl", "if_cuda_is_configured", "if_cuda")
 
 cc_binary(
     name = "_beam_search_ops.so",
@@ -14,34 +13,12 @@ cc_binary(
     ],
     copts = [
         "-pthread",
-        "-std=c++11",
+        "-std=c++17",
         D_GLIBCXX_USE_CXX11_ABI,
-    ] + if_cuda(["-DGOOGLE_CUDA=1"]),
+    ],
     linkshared = 1,
     deps = [
         "@local_config_tf//:libtensorflow_framework",
         "@local_config_tf//:tf_header_lib",
-    ] + if_cuda_is_configured([":beam_search_ops_gpu"]),
-)
-
-cc_library(
-    name = "beam_search_ops_gpu",
-    srcs = [
-        "cc/kernels/beam_search_ops.h",
-        "cc/kernels/beam_search_ops_gpu.cu.cc",
     ],
-    copts = if_cuda_is_configured([
-        "-DGOOGLE_CUDA=1",
-        "-x cuda",
-        "-nvcc_options=relaxed-constexpr",
-        "-nvcc_options=ftz=true",
-    ]),
-    deps = [
-        "@local_config_tf//:libtensorflow_framework",
-        "@local_config_tf//:tf_header_lib",
-    ] + if_cuda_is_configured([
-        "@local_config_cuda//cuda:cuda_headers",
-        "@local_config_cuda//cuda:cudart_static",
-    ]),
-    alwayslink = 1,
 )
diff --git a/tensorflow_addons/custom_ops/text/BUILD b/tensorflow_addons/custom_ops/text/BUILD
index bb2902c..afcc011 100644
--- a/tensorflow_addons/custom_ops/text/BUILD
+++ b/tensorflow_addons/custom_ops/text/BUILD
@@ -12,7 +12,7 @@ cc_binary(
     ],
     copts = [
         "-pthread",
-        "-std=c++11",
+        "-std=c++17",
         D_GLIBCXX_USE_CXX11_ABI,
     ],
     linkshared = 1,
diff --git a/tensorflow_addons/custom_ops/text/cc/kernels/skip_gram_kernels.cc b/tensorflow_addons/custom_ops/text/cc/kernels/skip_gram_kernels.cc
index bc685a0..76ef765 100644
--- a/tensorflow_addons/custom_ops/text/cc/kernels/skip_gram_kernels.cc
+++ b/tensorflow_addons/custom_ops/text/cc/kernels/skip_gram_kernels.cc
@@ -132,7 +132,7 @@ class SkipGramGenerateCandidatesOp : public OpKernel {
                               .TypeConstraint<type>("T"),    \
                           SkipGramGenerateCandidatesOp<type>)
 
-REGISTER_KERNEL(string);
+REGISTER_KERNEL(tstring);
 REGISTER_KERNEL(int64);
 REGISTER_KERNEL(int32);
 REGISTER_KERNEL(int16);
diff --git a/tensorflow_addons/image/transform_ops.py b/tensorflow_addons/image/transform_ops.py
index a47dd0b..be2b991 100644
--- a/tensorflow_addons/image/transform_ops.py
+++ b/tensorflow_addons/image/transform_ops.py
@@ -246,7 +246,7 @@ def angles_to_projective_transforms(angles,
             axis=1)
 
 
-@tf.RegisterGradient("ImageProjectiveTransformV2")
+@tf.RegisterGradient("Addons>ImageProjectiveTransformV2")
 def _image_projective_transform_grad(op, grad):
     """Computes the gradient for ImageProjectiveTransform."""
     images = op.inputs[0]
